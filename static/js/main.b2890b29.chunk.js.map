{"version":3,"sources":["theme.js","components/shapes/Hexagon.js","components/shapes/Square.js","components/shapes/IsoscelesTriangle.js","components/shapes/RightTriangle.js","components/QuiltSection.js","utils/specs.js","components/FabricKey.js","components/FormField.js","utils/generateImages.js","utils/getRandomInt.js","containers/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["theme","breakpoints","Hexagon","props","image","idx","fabric","quiltSectionWidth","changeOneFabric","fabricSelected","isEven","Math","floor","css","overflow","position","clipPath","width","height","backgroundRepeat","backgroundImage","backgroundPosition","backgroundSize","marginTop","onClick","Hexagons","quiltSectionHeight","imageList","heightMeasurement","className","display","gridTemplateColumns","gridTemplateRows","margin","paddingRight","maxHeight","boxShadow","map","key","Square","Squares","IsoscelesTriangle","marginLeft","marginRight","transform","IsoscelesTriangles","widthMeasurement","parseInt","RightTriangle","isFirst","isThird","isOddSecond","isOddFourth","isEvenSecond","isEvenFourth","RightTriangles","rows","QuiltSection","shape","specs","beeCreative","name","notImage","availableCounts","fabricCount","hueWidth","returnToWintersLane","FabricKey","counts","selectFabric","availableFabricCounts","Array","keys","ceil","notImg","indexOf","color","id","justifyContent","alignItems","border","padding","fontSize","FormField","label","children","generateRandomImage","min","max","rowWidth","setAvailableFabricCounts","updatedAvailableCounts","Object","assign","getImageList","touchingSpaces","touchingSpacesHue","slice","val","randImgNum","randImageHue","sameAsLastRow","sameAsLastRowHue","stillHasFabricAvailable","random","generateAllImages","newImageList","forEach","data","push","setImageList","JSON","parse","window","localStorage","getItem","images","setItem","stringify","removeImageList","removeItem","getImageCounts","Subtitle","title","description","Homepage","lStorage","initialValues","useState","setImageCounts","setQuiltSectionWidth","setQuiltSectionHeight","setFabric","setShape","updateImageList","changedFabrics","updateChangedFabrics","randomizeAllNew","randomizeExceptSelected","generateWithoutChanged","useEffect","flexWrap","href","type","length","value","onChange","event","target","num","paddingTop","paddingBottom","backgroundOpacity","imageIndex","includes","concat","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2890b29.chunk.js","sourcesContent":["const theme = {\r\n  breakpoints: [\"94vw\"],\r\n};\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport theme from \"../../theme\";\r\n\r\nconst Hexagon = props => {\r\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\r\n\r\n  // if even number wide, true.\r\n  // if not even number wide, make even every other row.\r\n  const isEven = quiltSectionWidth % 2 === 0 || Math.floor(idx / quiltSectionWidth) % 2 === 0;\r\n\r\n  return (\r\n    <div\r\n      css={[\r\n        {\r\n          overflow: \"hidden\",\r\n          position: \"relative\",\r\n          clipPath: \"polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)\",\r\n          width: `calc(125vw / ${quiltSectionWidth} - 1px)`,\r\n          height: `calc(8 / 9 * (125vw / ${quiltSectionWidth}) - 1px)`,\r\n          backgroundRepeat: \"repeat\",\r\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\r\n          backgroundPosition: \"center\",\r\n          backgroundSize: \"cover\",\r\n          marginTop: `calc((-8 / 9 * 125vw / ${quiltSectionWidth}) / 2)`,\r\n        },\r\n        isEven\r\n          ? {\r\n              \"&:nth-of-type(odd)\": {\r\n                marginTop: 0,\r\n              },\r\n            }\r\n          : {\r\n              \"&:nth-of-type(even)\": {\r\n                marginTop: 0,\r\n              },\r\n            },\r\n      ]}\r\n    >\r\n      {fabricSelected && (\r\n        <div\r\n          css={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nHexagon.propTypes = {\r\n  image: PropTypes.number,\r\n  idx: PropTypes.number,\r\n  fabric: PropTypes.string,\r\n  quiltSectionWidth: PropTypes.number,\r\n  quiltSectionHeight: PropTypes.number,\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number,\r\n};\r\n\r\nconst Hexagons = props => {\r\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\r\n  let heightMeasurement = `8 / 9 * (125vw / ${quiltSectionWidth})`;\r\n\r\n  return (\r\n    <div\r\n      className=\"Quilt\"\r\n      css={{\r\n        overflow: \"hidden\",\r\n        width: theme.breakpoints[0],\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth} ))`,\r\n        gridTemplateRows: `repeat(${quiltSectionHeight - 1}, calc(${heightMeasurement}))`,\r\n        margin: \"40px auto -16px auto\",\r\n        paddingRight: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} / 3)`,\r\n        maxHeight: `calc(${heightMeasurement} * ${quiltSectionHeight - 1})`,\r\n        boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\r\n      }}\r\n    >\r\n      {imageList.map((image, idx) => {\r\n        return <Hexagon key={`hexi-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nHexagons.propTypes = {\r\n  imageList: PropTypes.array,\r\n  quiltSectionWidth: PropTypes.number,\r\n  quiltSectionHeight: PropTypes.number,\r\n  fabric: PropTypes.string,\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number,\r\n};\r\n\r\nexport default Hexagons;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport theme from \"../../theme\";\r\n\r\nconst Square = props => {\r\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\r\n  return (\r\n    <div\r\n      css={{\r\n        clipPath: \"polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)\",\r\n        width: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} - 1px)`,\r\n        height: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} - 1px)`,\r\n        backgroundRepeat: \"repeat\",\r\n        backgroundPosition: \"center\",\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\r\n      }}\r\n    >\r\n      {fabricSelected && (\r\n        <div\r\n          css={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nSquare.propTypes = {\r\n  image: PropTypes.number,\r\n  idx: PropTypes.number,\r\n  fabric: PropTypes.string,\r\n  quiltSectionWidth: PropTypes.number,\r\n  quiltSectionHeight: PropTypes.number,\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number,\r\n};\r\n\r\nconst Squares = props => {\r\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\r\n  return (\r\n    <div\r\n      className=\"Quilt\"\r\n      css={{\r\n        overflow: \"hidden\",\r\n        width: theme.breakpoints[0],\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\r\n        gridTemplateRows: `repeat(${quiltSectionHeight - 1}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\r\n        margin: \"40px auto -15px auto\",\r\n        maxHeight: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} * ${quiltSectionHeight - 1})`,\r\n        boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\r\n      }}\r\n    >\r\n      {imageList.map((image, idx) => {\r\n        return <Square key={`square-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nSquares.propTypes = {\r\n  imageList: PropTypes.array,\r\n  quiltSectionWidth: PropTypes.number,\r\n  quiltSectionHeight: PropTypes.number,\r\n  fabric: PropTypes.string,\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number,\r\n};\r\n\r\nexport default Squares;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport theme from \"../../theme\";\r\n\r\nconst IsoscelesTriangle = props => {\r\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\r\n\r\n  // if even number wide, true.\r\n  // if not even number wide, make even every other row.\r\n  const isEven = quiltSectionWidth % 2 === 1 || Math.floor(idx / quiltSectionWidth) % 2 === 0;\r\n\r\n  return (\r\n    <div\r\n      css={[\r\n        {\r\n          overflow: \"hidden\",\r\n          position: \"relative\",\r\n          clipPath: \"polygon(0% 0%, 100% 0%, 50% 100% )\",\r\n          width: `calc(${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px)`,\r\n          backgroundRepeat: \"repeat\",\r\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\r\n          backgroundPosition: \"center\",\r\n          backgroundSize: \"cover\",\r\n          marginLeft: `calc((-${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px) / 2)`,\r\n          marginRight: `calc((-${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px) / 2)`,\r\n          transform: \"rotate(0deg)\",\r\n        },\r\n        isEven\r\n          ? {\r\n              \"&:nth-of-type(even)\": {\r\n                transform: \"rotate(180deg)\",\r\n              },\r\n            }\r\n          : {\r\n              \"&:nth-of-type(odd)\": {\r\n                transform: \"rotate(180deg)\",\r\n              },\r\n            },\r\n      ]}\r\n    >\r\n      {fabricSelected && (\r\n        <div\r\n          css={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nIsoscelesTriangle.propTypes = {\r\n  image: PropTypes.number,\r\n  idx: PropTypes.number,\r\n  fabric: PropTypes.string,\r\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number,\r\n};\r\n\r\nconst IsoscelesTriangles = props => {\r\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\r\n  let heightMeasurement = `${theme.breakpoints[0]} * 2 / ${quiltSectionWidth}`;\r\n  const widthMeasurement = `(188vw / ${quiltSectionWidth} - 1px) / 2`;\r\n\r\n  return (\r\n    <div\r\n      className=\"Quilt\"\r\n      css={{\r\n        overflow: \"hidden\",\r\n        width: `calc(${theme.breakpoints[0]} - ${widthMeasurement})`,\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${parseInt(quiltSectionWidth)}, calc( ${\r\n          theme.breakpoints[0]\r\n        } / ${quiltSectionWidth}))`,\r\n        gridTemplateRows: `repeat(${quiltSectionHeight}, calc(${heightMeasurement}))`,\r\n        margin: `40px auto -16px auto`,\r\n        maxHeight: `calc(${heightMeasurement} - 1})`,\r\n        boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\r\n      }}\r\n    >\r\n      {imageList.map((image, idx) => {\r\n        return <IsoscelesTriangle key={`hexi-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nIsoscelesTriangles.propTypes = {\r\n  imageList: PropTypes.array,\r\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  fabric: PropTypes.string,\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number,\r\n};\r\n\r\nexport default IsoscelesTriangles;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport theme from \"../../theme\";\r\n\r\nconst RightTriangle = props => {\r\n  const {\r\n    image,\r\n    idx,\r\n    fabric,\r\n    quiltSectionWidth,\r\n    changeOneFabric,\r\n    fabricSelected\r\n  } = props;\r\n\r\n  // if even number wide, true.\r\n  // if not even number wide, make even every other row.\r\n  const isFirst = Math.floor(idx / quiltSectionWidth) % 4 === 0;\r\n  const isThird = Math.floor(idx / quiltSectionWidth) % 4 === 2;\r\n\r\n  const isOddSecond =\r\n    Math.floor(idx / quiltSectionWidth) % 4 === 1 &&\r\n    (quiltSectionWidth - 1) % 2 === 1;\r\n  const isOddFourth =\r\n    Math.floor(idx / quiltSectionWidth) % 4 === 3 &&\r\n    (quiltSectionWidth - 1) % 2 === 1;\r\n  const isEvenSecond =\r\n    Math.floor(idx / quiltSectionWidth) % 4 === 1 &&\r\n    (quiltSectionWidth - 1) % 2 === 0;\r\n  const isEvenFourth =\r\n    Math.floor(idx / quiltSectionWidth) % 4 === 3 &&\r\n    (quiltSectionWidth - 1) % 2 === 0;\r\n\r\n  return (\r\n    <div\r\n      css={[\r\n        {\r\n          overflow: \"hidden\",\r\n          clipPath: \"polygon(0% 0%, 100% 0%, 0% 100% )\",\r\n          width: `calc(94vw / ${quiltSectionWidth} - 1px)`,\r\n          height: `calc((94vw / ${quiltSectionWidth}))`,\r\n          backgroundRepeat: \"repeat\",\r\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\r\n          backgroundPosition: \"center\",\r\n          backgroundSize: \"cover\"\r\n        },\r\n        isFirst && {\r\n          \"&:nth-of-type(odd)\": {\r\n            transform: \"rotate(0deg)\"\r\n          },\r\n          \"&:nth-of-type(even)\": {\r\n            transform: \"rotate(90deg)\"\r\n          }\r\n        },\r\n\r\n        isThird && {\r\n          \"&:nth-of-type(even)\": {\r\n            transform: \"rotate(180deg)\"\r\n          },\r\n          \"&:nth-of-type(odd)\": {\r\n            transform: \"rotate(270deg)\"\r\n          }\r\n        },\r\n\r\n        isOddSecond && {\r\n          \"&:nth-of-type(odd)\": {\r\n            transform: \"rotate(180deg)\",\r\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\r\n          },\r\n          \"&:nth-of-type(even)\": {\r\n            transform: \"rotate(270deg)\",\r\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\r\n          }\r\n        },\r\n        isOddFourth && {\r\n          \"&:nth-of-type(even)\": {\r\n            transform: \"rotate(0deg)\",\r\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\r\n          },\r\n          \"&:nth-of-type(odd)\": {\r\n            transform: \"rotate(90deg)\",\r\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\r\n          }\r\n        },\r\n\r\n        isEvenSecond && {\r\n          \"&:nth-of-type(even)\": {\r\n            transform: \"rotate(180deg)\",\r\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\r\n          },\r\n          \"&:nth-of-type(odd)\": {\r\n            transform: \"rotate(270deg)\",\r\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\r\n          }\r\n        },\r\n        isEvenFourth && {\r\n          \"&:nth-of-type(odd)\": {\r\n            transform: \"rotate(0deg)\",\r\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\r\n          },\r\n          \"&:nth-of-type(even)\": {\r\n            transform: \"rotate(90deg)\",\r\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\r\n          }\r\n        }\r\n      ]}\r\n    >\r\n      {fabricSelected && (\r\n        <div\r\n          css={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\"\r\n          }}\r\n        >\r\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nRightTriangle.propTypes = {\r\n  image: PropTypes.number,\r\n  idx: PropTypes.number,\r\n  fabric: PropTypes.string,\r\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number\r\n};\r\n\r\nconst RightTriangles = props => {\r\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\r\n  const heightMeasurement = `(94vw / ${quiltSectionWidth})`;\r\n  const rows = quiltSectionHeight * 2;\r\n  return (\r\n    <div\r\n      className=\"Quilt\"\r\n      css={{\r\n        overflow: \"hidden\",\r\n        width: theme.breakpoints[0],\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\r\n        gridTemplateRows: `repeat(${quiltSectionHeight + 1}, 0fr)`,\r\n        margin: \"40px auto -16px auto\",\r\n        maxHeight: `calc(${rows} * ${heightMeasurement} / 2)`,\r\n        boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\"\r\n      }}\r\n    >\r\n      {imageList.map((image, idx) => {\r\n        return (\r\n          <RightTriangle\r\n            key={`hexi-key-${image}-${idx}`}\r\n            idx={idx}\r\n            image={image}\r\n            {...props}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nRightTriangles.propTypes = {\r\n  imageList: PropTypes.array,\r\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  fabric: PropTypes.string,\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number\r\n};\r\n\r\nexport default RightTriangles;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Hexagons from \"./shapes/Hexagon\";\r\nimport Squares from \"./shapes/Square\";\r\nimport IsoscelesTriangles from \"./shapes/IsoscelesTriangle\";\r\nimport RightTriangles from \"./shapes/RightTriangle\";\r\n\r\nconst QuiltSection = props => {\r\n  const { shape } = props;\r\n\r\n  switch (shape) {\r\n    case \"Square\":\r\n      return <Squares {...props} />;\r\n    case \"IsoscelesTriangle\":\r\n      return <IsoscelesTriangles {...props} />;\r\n    case \"RightTriangle\":\r\n      return <RightTriangles {...props} />;\r\n    default:\r\n      return <Hexagons {...props} />;\r\n  }\r\n};\r\n\r\nQuiltSection.propTypes = {\r\n  setCounts: PropTypes.func,\r\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  fabric: PropTypes.string,\r\n  shape: PropTypes.string,\r\n  changeOneFabric: PropTypes.func,\r\n  fabricSelected: PropTypes.number,\r\n};\r\n\r\nexport default QuiltSection;\r\n","const specs = {\r\n  beeCreative: {\r\n    name: `\"Bee Creative\" by Deb Strain`,\r\n    notImage: [21, 22, 25, 27, 28, 30, 31, 32, 33],\r\n    availableCounts: {\r\n      1: 2, 2: 2, 3: 7.5, 4: 3, 5:2, \r\n      6: 11.5, 7: 6.5, 8: 14.5, 9: 14.5, 10: 2.5,\r\n      11: 1.5, 12: 8.5, 13: 2.5, 14: 5, 15: 10,\r\n      16: 11, 17: 9, 18: 6.5, 19: 14.5, 20: 10,\r\n      21: 1, 22: 1, 23: 8, 24: 13.5, \r\n      26: 4, 29: 4, 34: 5 \r\n    },\r\n    fabricCount: 34,\r\n    hueWidth: 5,\r\n  },\r\n  returnToWintersLane: {\r\n    name: `\"Return to Winter's Lane\" by Kate & Birdie`,\r\n    notImage: [19, 21],\r\n    fabricCount: 24,\r\n    hueWidth: 5,\r\n  },\r\n};\r\n\r\nexport default specs;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport specs from \"../utils/specs\";\r\n\r\nconst FabricKey = ({ counts, fabric, selectFabric, fabricSelected, availableFabricCounts }) => {\r\n  const { fabricCount, notImage, hueWidth } = specs[fabric];\r\n  const gridTemplateColumns = `calc(94vw / ${hueWidth} - 10px)`;\r\n\r\n  return (\r\n    <aside\r\n      css={{\r\n        margin: 0,\r\n        padding: 20,\r\n        width: \"calc(100% - 40px)\",\r\n        backgroundColor: \"#fff\",\r\n      }}\r\n    >\r\n      <h2 css={{ margin: 0, marginBottom: 20, padding: 0 }}>Color Key</h2>\r\n\r\n      {/** Hue Headers */}\r\n      <div\r\n        css={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n          fontWeight: \"bold\",\r\n          fontSize: 24,\r\n          margin: 0,\r\n        }}\r\n      >\r\n        {[...Array(hueWidth).keys()].map(idx => {\r\n          return (\r\n            <div\r\n              key={`Hue-Header-${(idx + 1) % hueWidth}`}\r\n              css={{ borderBottom: \"1px solid grey\", marginBottom: 10, paddingBottom: 10, width: \"100%\" }}\r\n            >{`Hue: ${(idx + 1) % hueWidth || hueWidth}`}</div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/** Images */}\r\n      <div css={{ display: \"flex\", justifyContent: \"space-between\", flexWrap: \"wrap\" }}>\r\n        {[...Array(Math.ceil(fabricCount / hueWidth) * hueWidth).keys()].map(idx => {\r\n          const notImg = notImage.indexOf(idx + 1) !== -1 || idx + 1 > fabricCount;\r\n\r\n          return (\r\n            <div css={{ marginBottom: 10 }} key={`Image-${idx + 1}`}>\r\n              {!notImg && (\r\n                <div\r\n                  css={{\r\n                    fontWeight: \"bold\",\r\n                    fontSize: 16,\r\n                    textShadow: \"0px 0px 2px white\",\r\n                  }}\r\n                >\r\n                  <span>{`#${idx + 1}: `}</span>\r\n                  <span css={{ color: (counts[idx + 1] < 4 || counts[idx + 1] > 6) && \"red\" }}>{`${counts[idx + 1] ||\r\n                    0} uses`}</span>{' - '}\r\n                    <span css={{ color: (availableFabricCounts[idx + 1] < 1) && \"red\" }}>{`${availableFabricCounts[idx + 1] ||\r\n                    'unlimited'} left`}</span>\r\n                </div>\r\n              )}\r\n              <div\r\n                key={`orig-image-order-${idx + 1}`}\r\n                id={`orig-image-order-${idx + 1}`}\r\n                css={{\r\n                  width: gridTemplateColumns,\r\n                  height: 100,\r\n                  backgroundRepeat: \"repeat\",\r\n                  backgroundImage: `url(./images/${fabric}/${fabric}${idx + 1}.jpg)`,\r\n                  backgroundPosition: \"center\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"flex-end\",\r\n                  border: !notImg && \"1px solid grey\",\r\n                }}\r\n              >\r\n                {!notImg && (\r\n                  <button\r\n                    css={{ width: \"calc(100% + 2px)\", margin: -1, padding: 5, fontSize: \"0.9rem\" }}\r\n                    onClick={() => {\r\n                      fabricSelected === idx + 1 ? selectFabric(\"\") : selectFabric(idx + 1);\r\n                    }}\r\n                  >\r\n                    {fabricSelected === idx + 1 ? \"No more!\" : \"Choose me!\"}\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n\r\nFabricKey.propTypes = {\r\n  counts: PropTypes.object,\r\n  hueWidth: PropTypes.number,\r\n  fabric: PropTypes.string,\r\n  fabricSelected: PropTypes.number,\r\n  selectFabric: PropTypes.func,\r\n};\r\n\r\nexport default FabricKey;\r\n","import React from \"react\";\r\n\r\nconst FormField = ({ label, children }) => {\r\n  return (\r\n    <label\r\n      css={{\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        alignItems: \"center\",\r\n        margin: 18,\r\n        fontSize: \"1.2rem\",\r\n      }}\r\n    >\r\n      <p css={{ margin: 0, padding: 0, textAlign: \"right\" }}>{label}</p>\r\n      {children}\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default FormField;\r\n","import getRandomInt from \"./getRandomInt\";\r\nimport specs from \"./specs\";\r\n\r\n/**\r\n * Generates a single random image for generateAllImages()\r\n *\r\n * @param {int} idx\r\n * @param {int} rowWidth\r\n * @param {int} hueWidth\r\n * @param {array} notColors\r\n *\r\n * @returns {int}\r\n */\r\nconst generateRandomImage = ({ idx, rowWidth, fabric, shape, availableFabricCounts,\r\n  setAvailableFabricCounts }) => {\r\n  const { hueWidth, notImage, fabricCount, availableCounts } = specs[fabric];\r\n  const updatedAvailableCounts = Object.assign( availableFabricCounts ?? availableCounts)\r\n\r\n  let imageList = getImageList();\r\n\r\n  // get 3 hexis touching top of current hexi\r\n  let touchingSpaces = [imageList[idx - 1], imageList[idx - 2]];\r\n\r\n  if (shape && shape.indexOf(\"Triangle\") > -1) {\r\n    touchingSpaces = [\r\n      ...touchingSpaces,\r\n      imageList[idx - rowWidth * 2 - 1],\r\n      imageList[idx - rowWidth * 2],\r\n      imageList[idx - rowWidth * 2 + 1]\r\n    ];\r\n  } else {\r\n    touchingSpaces = [\r\n      ...touchingSpaces,\r\n      imageList[idx - rowWidth - 1],\r\n      imageList[idx - rowWidth],\r\n      imageList[idx - rowWidth + 1]\r\n    ];\r\n  }\r\n\r\n  // Assuming 5 hues (the minimum allowed), making sure that all 5 previous spaces\r\n  // aren't the same as the current one is impossible and results in an unending loop\r\n  const hueList = touchingSpaces.slice(0, -1); // slicing in place can break things if not done carefully.\r\n  const touchingSpacesHue = hueList.map(val => val % hueWidth);\r\n\r\n  // Set default random values\r\n  let randImgNum = 1;\r\n  let randImageHue = randImgNum % hueWidth;\r\n  let sameAsLastRow = true;\r\n  let sameAsLastRowHue = true;\r\n  let stillHasFabricAvailable = true;\r\n\r\n  do {\r\n    // Get random values\r\n    randImgNum = getRandomInt(1, fabricCount + 1);\r\n    randImageHue = randImgNum % hueWidth;\r\n\r\n    // set params for easier \"while\" use\r\n    sameAsLastRow = touchingSpaces.indexOf(randImgNum) > -1;\r\n    sameAsLastRowHue = touchingSpacesHue.indexOf(randImageHue) > -1;\r\n    stillHasFabricAvailable = (updatedAvailableCounts[randImgNum] ?? 100) - 1 >= 0;\r\n\r\n  } while (\r\n    notImage.indexOf(randImgNum) > -1 ||\r\n    sameAsLastRow ||\r\n    sameAsLastRowHue || \r\n    !stillHasFabricAvailable\r\n  );\r\n\r\n  updatedAvailableCounts[randImgNum] = updatedAvailableCounts[randImgNum] - 1\r\n  setAvailableFabricCounts(updatedAvailableCounts)\r\n  return randImgNum;\r\n};\r\n\r\n/**\r\n * Generates all the images for the quilt at once based on either localStorage, or pulling random images from generateRandomImage()\r\n *\r\n * @param {int} hueWidth\r\n * @param {int} quiltSectionWidth\r\n * @param {int} quiltSectionHeight\r\n * @param {array} notColors\r\n *\r\n * @returns {array}\r\n */\r\nconst generateAllImages = ({\r\n  fabric,\r\n  quiltSectionWidth,\r\n  quiltSectionHeight,\r\n  shape,\r\n  availableFabricCounts,\r\n  setAvailableFabricCounts\r\n}) => {\r\n  const imageList = getImageList();\r\n  const newImageList = [];\r\n  const height =\r\n    shape === \"RightTriangle\"\r\n      ? (quiltSectionHeight - 1) * 2\r\n      : quiltSectionHeight;\r\n\r\n  [...Array(quiltSectionWidth * height).keys()].forEach(idx => {\r\n    const data = { idx, rowWidth: quiltSectionWidth, fabric, availableFabricCounts,\r\n      setAvailableFabricCounts };\r\n    const image = imageList[idx] || generateRandomImage(data);\r\n    newImageList.push(image);\r\n    setImageList(newImageList);\r\n  });\r\n\r\n  return newImageList;\r\n};\r\n\r\n/**\r\n * Generates all the images for the quilt pulling random images from generateRandomImage().\r\n * Then changes items of the generated quit array which indexes are inside of the changedFabrics arrat back to the previous version.\r\n *\r\n * @param {object} fabric\r\n * @param {int} quiltSectionWidth\r\n * @param {int} quiltSectionHeight\r\n * @param {array} changedFabrics\r\n *\r\n * @returns {array}\r\n */\r\nconst generateWithoutChanged = ({\r\n  fabric,\r\n  quiltSectionWidth,\r\n  quiltSectionHeight,\r\n  changedFabrics\r\n}) => {\r\n  const imageList = getImageList();\r\n  const newImageList = [];\r\n\r\n  [...Array(quiltSectionWidth * quiltSectionHeight).keys()].forEach(idx => {\r\n    const data = { idx, rowWidth: quiltSectionWidth, fabric };\r\n    const image = generateRandomImage(data);\r\n    newImageList.push(image);\r\n    setImageList(newImageList);\r\n  });\r\n\r\n  changedFabrics.forEach(idx => {\r\n    newImageList[idx] = imageList[idx];\r\n  });\r\n\r\n  return newImageList;\r\n};\r\n\r\n/**\r\n * Empties localStorage, and runs generateAllImages()\r\n *\r\n * @param {int} hueWidth\r\n * @param {int} quiltSectionWidth\r\n * @param {int} quiltSectionHeight\r\n * @param {array} notColors\r\n *\r\n * @returns {array}\r\n */\r\nconst regenerateAllImages = data => {\r\n  removeImageList();\r\n  return generateAllImages(data);\r\n};\r\n\r\n/**\r\n * Returns the imageList from either localStorage, or an empty array\r\n *\r\n * @returns {array}\r\n */\r\nconst getImageList = () => {\r\n  const images = JSON.parse(window.localStorage.getItem(\"imageList\"));\r\n  return images || [];\r\n};\r\n\r\n/**\r\n * Sets an array of images to localStorage\r\n *\r\n * @param {array} images\r\n */\r\nconst setImageList = images => {\r\n  window.localStorage.setItem(\"imageList\", JSON.stringify(images || []));\r\n};\r\n\r\n/**\r\n * Removes imageList from localStorage\r\n *\r\n * @param {array} images\r\n */\r\nconst removeImageList = () => {\r\n  window.localStorage.removeItem(\"imageList\");\r\n};\r\n\r\n/**\r\n * @returns {object} object of counts for key\r\n */\r\n\r\nconst getImageCounts = () => {\r\n  const imageList = getImageList();\r\n  let counts = {};\r\n\r\n  imageList.forEach(val => {\r\n    counts[val] = counts[val] + 1 || 1;\r\n  });\r\n\r\n  return counts;\r\n};\r\n\r\nexport {\r\n  generateRandomImage,\r\n  generateAllImages,\r\n  generateWithoutChanged,\r\n  getImageList,\r\n  setImageList,\r\n  regenerateAllImages,\r\n  getImageCounts\r\n};\r\n","export default function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./homepage.css\";\r\n\r\nimport QuiltSection from \"../components/QuiltSection\";\r\nimport FabricKey from \"../components/FabricKey\";\r\nimport FormField from \"../components/FormField\";\r\nimport {\r\n  regenerateAllImages,\r\n  generateAllImages,\r\n  generateWithoutChanged,\r\n  getImageCounts,\r\n  setImageList\r\n} from \"../utils/generateImages\";\r\nimport specs from \"../utils/specs\";\r\n\r\nconst Subtitle = ({ title, description }) => (\r\n  <p\r\n    css={{\r\n      margin: 10,\r\n      padding: 0,\r\n      fontSize: \"1.2rem\"\r\n    }}\r\n  >\r\n    <span css={{ fontWeight: \"bold\" }}>{title}</span> {description}\r\n  </p>\r\n);\r\n\r\nfunction Homepage() {\r\n  const lStorage = { ...localStorage };\r\n  const initialValues = {\r\n    width: parseInt(lStorage?.quiltSectionWidth ?? 17),\r\n    height: parseInt(lStorage?.quiltSectionHeight ?? 7),\r\n    fabric: lStorage?.fabric ?? \"beeCreative\",\r\n    shape: lStorage?.shape ?? \"Hexagon\",\r\n    availableFabricCounts: lStorage?.availableFabricCounts ?? specs[lStorage?.fabric ?? \"beeCreative\"]?.availableCounts\r\n  };\r\n\r\n  // Find out number of instancesl\r\n  const [counts, setImageCounts] = useState(getImageCounts());\r\n  const [quiltSectionWidth, setQuiltSectionWidth] = useState(\r\n    initialValues.width\r\n  );\r\n  const [quiltSectionHeight, setQuiltSectionHeight] = useState(\r\n    initialValues.height\r\n  );\r\n  const [fabric, setFabric] = useState(initialValues.fabric);\r\n  const [shape, setShape] = useState(initialValues.shape);\r\n  const [fabricSelected, selectFabric] = useState();\r\n  const [imageList, updateImageList] = useState([]);\r\n  const [changedFabrics, updateChangedFabrics] = useState([]);\r\n  const [availableFabricCounts, setAvailableFabricCounts] = useState(initialValues.availableFabricCounts)\r\n\r\n  const changeOneFabric = imageIndex => {\r\n    let newImageList = Object.assign(imageList);\r\n\r\n    newImageList[imageIndex] = fabricSelected;\r\n    setImageList(newImageList);\r\n    setImageCounts(getImageCounts());\r\n\r\n    updateImageList(\r\n      generateAllImages({\r\n        quiltSectionWidth,\r\n        quiltSectionHeight,\r\n        fabric,\r\n        shape, \r\n        availableFabricCounts,\r\n        setAvailableFabricCounts\r\n      })\r\n    );\r\n\r\n    if (!changedFabrics.includes(imageIndex, 0))\r\n      updateChangedFabrics(changedFabrics.concat(imageIndex));\r\n  };\r\n\r\n  const randomizeAllNew = () => {\r\n    const newImageList = regenerateAllImages({\r\n      quiltSectionWidth,\r\n      quiltSectionHeight,\r\n      fabric,\r\n      availableFabricCounts, \r\n      setAvailableFabricCounts\r\n    });\r\n    updateImageList(newImageList);\r\n    updateChangedFabrics([]);\r\n\r\n    setImageCounts(getImageCounts());\r\n  };\r\n\r\n  const randomizeExceptSelected = () => {\r\n    let newImageList = Object.assign(imageList);\r\n\r\n    setImageList(newImageList);\r\n    setImageCounts(getImageCounts());\r\n\r\n    updateImageList(\r\n      generateWithoutChanged({\r\n        quiltSectionWidth,\r\n        quiltSectionHeight,\r\n        fabric,\r\n        changedFabrics,\r\n        availableFabricCounts, \r\n        setAvailableFabricCounts\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateImageList(\r\n      generateAllImages({\r\n        quiltSectionWidth,\r\n        quiltSectionHeight,\r\n        fabric,\r\n        shape,\r\n        availableFabricCounts, \r\n        setAvailableFabricCounts\r\n      })\r\n    );\r\n  }, [quiltSectionWidth, quiltSectionHeight, fabric, shape, availableFabricCounts, \r\n    setAvailableFabricCounts]);\r\n\r\n  return (\r\n    <main className=\"Homepage\">\r\n      <header>\r\n        <h1 css={{ margin: 0, paddingTop: 20 }}>Quilt Fabric Randomizer</h1>\r\n        <Subtitle description=\"by Jen Luker\" />\r\n      </header>\r\n\r\n      <div\r\n        css={{\r\n          boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\r\n          borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n          borderBottom: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n          width: \"100%\",\r\n          marginTop: 20,\r\n          padding: \"20px auto 10px auto\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n          alignItems: \"flex-end\",\r\n          flexWrap: \"wrap\",\r\n          backgroundColor: \"#fff\"\r\n        }}\r\n      >\r\n        <div css={{ minWidth: 360 }}>\r\n          <div\r\n            css={{\r\n              width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              flexWrap: \"wrap\",\r\n              margin: `0 auto`\r\n            }}\r\n          >\r\n            <Subtitle\r\n              description={\r\n                <a href=\"https://knitcodemonkey.github.io/hexagon-quilt-map/\">\r\n                  Go to Website\r\n                </a>\r\n              }\r\n            />\r\n            <Subtitle\r\n              description={\r\n                <a href=\"https://github.com/knitcodemonkey/hexagon-quilt-map\">\r\n                  See on Github\r\n                </a>\r\n              }\r\n            />\r\n          </div>\r\n          <div\r\n            css={{\r\n              width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              flexWrap: \"wrap\",\r\n              margin: `10px auto`\r\n            }}\r\n          >\r\n            <button\r\n              css={{ flexWrap: \"wrap\" }}\r\n              type=\"button\"\r\n              onClick={randomizeAllNew}\r\n            >\r\n              Randomize\r\n            </button>\r\n            <button\r\n              css={{ flexWrap: \"wrap\" }}\r\n              type=\"button\"\r\n              onClick={() => {\r\n                if (changedFabrics.length > 0) randomizeExceptSelected();\r\n                else randomizeAllNew();\r\n              }}\r\n            >\r\n              Randomize Not Changed\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <form\r\n          css={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-around\",\r\n            flexWrap: \"wrap\"\r\n          }}\r\n        >\r\n          <div>\r\n            <FormField label=\"Shape:\">\r\n              <select\r\n                value={shape}\r\n                onChange={event => {\r\n                  setShape(event.target.value);\r\n                  localStorage.setItem(\"shape\", event.target.value);\r\n                  updateChangedFabrics([]);\r\n                }}\r\n              >\r\n                <option value={\"Hexagon\"}>Hexagon</option>\r\n                <option value={\"Square\"}>Square</option>\r\n                <option value={\"IsoscelesTriangle\"}>Isosceles Triangle</option>\r\n                <option value={\"RightTriangle\"}>Right Triangle</option>\r\n              </select>\r\n            </FormField>\r\n\r\n            <FormField label=\"Fabric:\">\r\n              <select\r\n                value={fabric}\r\n                onChange={event => {\r\n                  setFabric(event.target.value);\r\n                  localStorage.setItem(\"fabric\", event.target.value);\r\n                  updateChangedFabrics([]);\r\n                }}\r\n              >\r\n                {Object.keys(specs).map(key => {\r\n                  return (\r\n                    <option key={key} value={key}>\r\n                      {specs[key].name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Generated Width:\">\r\n              <select\r\n                value={quiltSectionWidth}\r\n                onChange={event => {\r\n                  setQuiltSectionWidth(parseInt(event.target.value));\r\n                  localStorage.setItem(\r\n                    \"quiltSectionWidth\",\r\n                    parseInt(event.target.value)\r\n                  );\r\n                  updateChangedFabrics([]);\r\n                }}\r\n              >\r\n                {[...Array(30).keys()].map(num => {\r\n                  return (\r\n                    <option key={`wide-${num + 1}`} value={num + 1}>\r\n                      {num}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </FormField>\r\n\r\n            <FormField label=\"Generated Height:\">\r\n              <select\r\n                value={quiltSectionHeight}\r\n                onChange={event => {\r\n                  setQuiltSectionHeight(parseInt(event.target.value));\r\n                  localStorage.setItem(\r\n                    \"quiltSectionHeight\",\r\n                    parseInt(event.target.value)\r\n                  );\r\n                  updateChangedFabrics([]);\r\n                }}\r\n              >\r\n                {[...Array(100).keys()].map(num => {\r\n                  return (\r\n                    <option key={`tall-${num + 1}`} value={num + 1}>\r\n                      {num}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </FormField>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <article\r\n        css={{\r\n          paddingTop: 1,\r\n          paddingBottom: 56,\r\n          margin: \"0 auto\",\r\n          backgroundImage: `url(./wood.jpg)`,\r\n          backgroundOpacity: 0.5\r\n        }}\r\n      >\r\n        <QuiltSection\r\n          key={`QuiltSection-${imageList.length}-${fabricSelected}`}\r\n          quiltSectionWidth={quiltSectionWidth}\r\n          quiltSectionHeight={quiltSectionHeight}\r\n          fabric={fabric}\r\n          shape={shape}\r\n          imageList={imageList}\r\n          changeOneFabric={changeOneFabric}\r\n          fabricSelected={fabricSelected}\r\n        />\r\n      </article>\r\n\r\n      <footer\r\n        css={{\r\n          borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n          boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\"\r\n        }}\r\n      >\r\n        <FabricKey\r\n          counts={counts}\r\n          fabric={fabric}\r\n          selectFabric={selectFabric}\r\n          fabricSelected={fabricSelected}\r\n          availableFabricCounts={availableFabricCounts}\r\n        />\r\n      </footer>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Homepage from \"./containers/Homepage\";\r\n\r\nfunction App() {\r\n  return <Homepage />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}