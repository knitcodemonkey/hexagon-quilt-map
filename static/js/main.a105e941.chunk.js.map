{"version":3,"sources":["theme.js","components/shapes/Hexagon.js","components/shapes/Square.js","components/shapes/IsoscelesTriangle.js","components/shapes/RightTriangle.js","components/QuiltSection.js","utils/specs.js","components/FabricKey.js","components/FormField.js","utils/generateImages.js","utils/getRandomInt.js","containers/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["theme","breakpoints","Hexagon","props","image","idx","fabric","quiltSectionWidth","changeOneFabric","fabricSelected","isEven","Math","floor","css","overflow","position","clipPath","width","height","backgroundRepeat","backgroundImage","backgroundPosition","backgroundSize","marginTop","onClick","Hexagons","quiltSectionHeight","imageList","heightMeasurement","className","display","gridTemplateColumns","gridTemplateRows","margin","paddingRight","maxHeight","map","key","Square","Squares","IsoscelesTriangle","marginLeft","marginRight","transform","IsoscelesTriangles","widthMeasurement","parseInt","isFirst","isThird","isOddSecond","isOddFourth","isEvenSecond","isEvenFourth","rows","QuiltSection","shape","console","log","RightTriangle","specs","beeCreative","name","notImage","fabricCount","hueWidth","returnToWintersLane","FabricKey","counts","selectFabric","Array","keys","ceil","notImg","indexOf","color","id","justifyContent","alignItems","border","padding","fontSize","FormField","label","children","generateAllImages","getImageList","newImageList","forEach","data","rowWidth","min","max","touchingSpaces","touchingSpacesHue","slice","val","randImgNum","randImageHue","sameAsLastRow","sameAsLastRowHue","random","generateRandomImage","push","setImageList","regenerateAllImages","removeImageList","JSON","parse","window","localStorage","getItem","images","setItem","stringify","removeItem","getImageCounts","Subtitle","title","description","Homepage","lStorage","initialValues","useState","setImageCounts","setQuiltSectionWidth","setQuiltSectionHeight","setFabric","setShape","updateImageList","useEffect","flexWrap","href","type","value","onChange","event","target","Object","num","length","imageIndex","assign","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a105e941.chunk.js","sourcesContent":["const theme = {\n  breakpoints: [\"94vw\"],\n};\n\nexport default theme;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport theme from \"../../theme\";\n\nconst Hexagon = props => {\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\n\n  // if even number wide, true.\n  // if not even number wide, make even every other row.\n  const isEven = quiltSectionWidth % 2 === 0 || Math.floor(idx / quiltSectionWidth) % 2 === 0;\n\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          position: \"relative\",\n          clipPath: \"polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)\",\n          width: `calc(125vw / ${quiltSectionWidth} - 1px)`,\n          height: `calc(8 / 9 * (125vw / ${quiltSectionWidth}) - 1px)`,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          marginTop: `calc((-8 / 9 * 125vw / ${quiltSectionWidth}) / 2)`,\n        },\n        isEven\n          ? {\n              \"&:nth-of-type(odd)\": {\n                marginTop: 0,\n              },\n            }\n          : {\n              \"&:nth-of-type(even)\": {\n                marginTop: 0,\n              },\n            },\n      ]}\n    >\n      {fabricSelected && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nHexagon.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nconst Hexagons = props => {\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\n  let heightMeasurement = `8 / 9 * (125vw / ${quiltSectionWidth})`;\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        overflow: \"hidden\",\n        width: theme.breakpoints[0],\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth} ))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight - 1}, calc(${heightMeasurement}))`,\n        margin: \"40px auto -16px auto\",\n        paddingRight: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} / 3)`,\n        maxHeight: `calc(${heightMeasurement} * ${quiltSectionHeight - 1})`,\n      }}\n    >\n      {imageList.map((image, idx) => {\n        return <Hexagon key={`hexi-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\n      })}\n    </div>\n  );\n};\n\nHexagons.propTypes = {\n  imageList: PropTypes.array,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  fabric: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default Hexagons;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport theme from \"../../theme\";\n\nconst Square = props => {\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\n  return (\n    <div\n      css={{\n        clipPath: \"polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)\",\n        width: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} - 1px)`,\n        height: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} - 1px)`,\n        backgroundRepeat: \"repeat\",\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\",\n        backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n      }}\n    >\n      {fabricSelected && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nSquare.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nconst Squares = props => {\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        overflow: \"hidden\",\n        width: theme.breakpoints[0],\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight - 1}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\n        margin: \"40px auto -15px auto\",\n        maxHeight: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} * ${quiltSectionHeight - 1})`,\n      }}\n    >\n      {imageList.map((image, idx) => {\n        return <Square key={`square-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\n      })}\n    </div>\n  );\n};\n\nSquares.propTypes = {\n  imageList: PropTypes.array,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  fabric: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default Squares;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport theme from \"../../theme\";\n\nconst IsoscelesTriangle = props => {\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\n\n  // if even number wide, true.\n  // if not even number wide, make even every other row.\n  const isEven = quiltSectionWidth % 2 === 1 || Math.floor(idx / quiltSectionWidth) % 2 === 0;\n\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          position: \"relative\",\n          clipPath: \"polygon(0% 0%, 100% 0%, 50% 100% )\",\n          width: `calc(${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px)`,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          marginLeft: `calc((-${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px) / 2)`,\n          marginRight: `calc((-${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px) / 2)`,\n          transform: \"rotate(0deg)\",\n        },\n        isEven\n          ? {\n              \"&:nth-of-type(even)\": {\n                transform: \"rotate(180deg)\",\n              },\n            }\n          : {\n              \"&:nth-of-type(odd)\": {\n                transform: \"rotate(180deg)\",\n              },\n            },\n      ]}\n    >\n      {fabricSelected && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nIsoscelesTriangle.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nconst IsoscelesTriangles = props => {\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\n  let heightMeasurement = `${theme.breakpoints[0]} * 2 / ${quiltSectionWidth}`;\n  const widthMeasurement = `(188vw / ${quiltSectionWidth} - 1px) / 2`;\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        overflow: \"hidden\",\n        width: `calc(${theme.breakpoints[0]} - ${widthMeasurement})`,\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${parseInt(quiltSectionWidth)}, calc( ${\n          theme.breakpoints[0]\n        } / ${quiltSectionWidth}))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight}, calc(${heightMeasurement}))`,\n        margin: `40px auto -16px auto`,\n        maxHeight: `calc(${heightMeasurement} - 1})`,\n      }}\n    >\n      {imageList.map((image, idx) => {\n        return <IsoscelesTriangle key={`hexi-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\n      })}\n    </div>\n  );\n};\n\nIsoscelesTriangles.propTypes = {\n  imageList: PropTypes.array,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  fabric: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default IsoscelesTriangles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport theme from \"../../theme\";\n\nconst Hexagon = props => {\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\n\n  // if even number wide, true.\n  // if not even number wide, make even every other row.\n  const isFirst = Math.floor(idx / quiltSectionWidth) % 4 === 0;\n  const isThird = Math.floor(idx / quiltSectionWidth) % 4 === 2;\n\n  const isOddSecond = Math.floor(idx / quiltSectionWidth) % 4 === 1 && (quiltSectionWidth - 1) % 2 === 1;\n  const isOddFourth = Math.floor(idx / quiltSectionWidth) % 4 === 3 && (quiltSectionWidth - 1) % 2 === 1;\n  const isEvenSecond = Math.floor(idx / quiltSectionWidth) % 4 === 1 && (quiltSectionWidth - 1) % 2 === 0;\n  const isEvenFourth = Math.floor(idx / quiltSectionWidth) % 4 === 3 && (quiltSectionWidth - 1) % 2 === 0;\n\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          clipPath: \"polygon(0% 0%, 100% 0%, 0% 100% )\",\n          width: `calc(94vw / ${quiltSectionWidth} - 1px)`,\n          height: `calc((94vw / ${quiltSectionWidth}))`,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n        },\n        isFirst && {\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(0deg)\",\n          },\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(90deg)\",\n          },\n        },\n\n        isThird && {\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(180deg)\",\n          },\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(270deg)\",\n          },\n        },\n\n        isOddSecond && {\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(180deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`,\n          },\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(270deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`,\n          },\n        },\n        isOddFourth && {\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(0deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`,\n          },\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(90deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`,\n          },\n        },\n\n        isEvenSecond && {\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(180deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`,\n          },\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(270deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`,\n          },\n        },\n        isEvenFourth && {\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(0deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`,\n          },\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(90deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`,\n          },\n        },\n      ]}\n    >\n      {fabricSelected && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nHexagon.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nconst Hexagons = props => {\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\n  const heightMeasurement = `(94vw / ${quiltSectionWidth})`;\n  const rows = quiltSectionHeight + (quiltSectionHeight % 2);\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        overflow: \"hidden\",\n        width: theme.breakpoints[0],\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight}, 0fr)`,\n        margin: \"40px auto -16px auto\",\n        maxHeight: `calc(${rows} * ${heightMeasurement} / 2)`,\n      }}\n    >\n      {imageList.map((image, idx) => {\n        return <Hexagon key={`hexi-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\n      })}\n    </div>\n  );\n};\n\nHexagons.propTypes = {\n  imageList: PropTypes.array,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  fabric: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default Hexagons;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Hexagons from \"./shapes/Hexagon\";\nimport Squares from \"./shapes/Square\";\nimport IsoscelesTriangles from \"./shapes/IsoscelesTriangle\";\nimport RightTriangles from \"./shapes/RightTriangle\";\n\nconst QuiltSection = props => {\n  const { shape } = props;\n\n  console.log(shape);\n\n  switch (shape) {\n    case \"Square\":\n      return <Squares {...props} />;\n    case \"IsoscelesTriangle\":\n      return <IsoscelesTriangles {...props} />;\n    case \"RightTriangle\":\n      return <RightTriangles {...props} />;\n    default:\n      return <Hexagons {...props} />;\n  }\n};\n\nQuiltSection.propTypes = {\n  setCounts: PropTypes.func,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  fabric: PropTypes.string,\n  shape: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default QuiltSection;\n","const specs = {\n  beeCreative: {\n    name: `\"Bee Creative\" by Deb Strain`,\n    notImage: [25, 27, 28, 30, 31, 32, 33],\n    fabricCount: 34,\n    hueWidth: 5,\n  },\n  returnToWintersLane: {\n    name: `\"Return to Winter's Lane\" by Kate & Birdie`,\n    notImage: [19, 21],\n    fabricCount: 24,\n    hueWidth: 5,\n  },\n};\n\nexport default specs;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport specs from \"../utils/specs\";\n\nconst FabricKey = ({ counts, fabric, selectFabric, fabricSelected }) => {\n  const { fabricCount, notImage, hueWidth } = specs[fabric];\n  const gridTemplateColumns = `calc(94vw / ${hueWidth} - 10px)`;\n\n  return (\n    <aside\n      css={{\n        margin: 0,\n        padding: 20,\n        width: \"calc(100% - 40px)\",\n        backgroundColor: \"#fff\",\n      }}\n    >\n      <h2 css={{ margin: 0, marginBottom: 20, padding: 0 }}>Color Key</h2>\n\n      {/** Hue Headers */}\n      <div\n        css={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          fontWeight: \"bold\",\n          fontSize: 24,\n          margin: 0,\n        }}\n      >\n        {[...Array(hueWidth).keys()].map(idx => {\n          return (\n            <div\n              key={`Hue-Header-${(idx + 1) % hueWidth}`}\n              css={{ borderBottom: \"1px solid grey\", marginBottom: 10, paddingBottom: 10, width: \"100%\" }}\n            >{`Hue: ${(idx + 1) % hueWidth || hueWidth}`}</div>\n          );\n        })}\n      </div>\n\n      {/** Images */}\n      <div css={{ display: \"flex\", justifyContent: \"space-between\", flexWrap: \"wrap\" }}>\n        {[...Array(Math.ceil(fabricCount / hueWidth) * hueWidth).keys()].map(idx => {\n          const notImg = notImage.indexOf(idx + 1) !== -1 || idx + 1 > fabricCount;\n\n          return (\n            <div css={{ marginBottom: 10 }} key={`Image-${idx + 1}`}>\n              {!notImg && (\n                <div\n                  css={{\n                    fontWeight: \"bold\",\n                    fontSize: 16,\n                    textShadow: \"0px 0px 2px white\",\n                  }}\n                >\n                  <span>{`#${idx + 1}: `}</span>\n                  <span css={{ color: (counts[idx + 1] < 4 || counts[idx + 1] > 6) && \"red\" }}>{`${counts[idx + 1] ||\n                    0} uses`}</span>\n                </div>\n              )}\n              <div\n                key={`orig-image-order-${idx + 1}`}\n                id={`orig-image-order-${idx + 1}`}\n                css={{\n                  width: gridTemplateColumns,\n                  height: 100,\n                  backgroundRepeat: \"repeat\",\n                  backgroundImage: `url(./images/${fabric}/${fabric}${idx + 1}.jpg)`,\n                  backgroundPosition: \"center\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"flex-end\",\n                  border: !notImg && \"1px solid grey\",\n                }}\n              >\n                {!notImg && (\n                  <button\n                    css={{ width: \"calc(100% + 2px)\", margin: -1, padding: 5, fontSize: \"0.9rem\" }}\n                    onClick={() => {\n                      fabricSelected === idx + 1 ? selectFabric(\"\") : selectFabric(idx + 1);\n                    }}\n                  >\n                    {fabricSelected === idx + 1 ? \"No more!\" : \"Choose me!\"}\n                  </button>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </aside>\n  );\n};\n\nFabricKey.propTypes = {\n  counts: PropTypes.object,\n  hueWidth: PropTypes.number,\n  fabric: PropTypes.string,\n  fabricSelected: PropTypes.number,\n  selectFabric: PropTypes.func,\n};\n\nexport default FabricKey;\n","import React from \"react\";\n\nconst FormField = ({ label, children }) => {\n  return (\n    <label\n      css={{\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        margin: 18,\n        fontSize: \"1.2rem\",\n      }}\n    >\n      <p css={{ margin: 0, padding: 0, textAlign: \"right\" }}>{label}</p>\n      {children}\n    </label>\n  );\n};\n\nexport default FormField;\n","import getRandomInt from \"./getRandomInt\";\nimport specs from \"./specs\";\n\n/**\n * Generates a single random image for generateAllImages()\n *\n * @param {int} idx\n * @param {int} rowWidth\n * @param {int} hueWidth\n * @param {array} notColors\n *\n * @returns {int}\n */\nconst generateRandomImage = ({ idx, rowWidth, fabric }) => {\n  const { hueWidth, notImage, fabricCount } = specs[fabric];\n  let imageList = getImageList();\n\n  // get 3 hexis touching top of current hexi\n  const touchingSpaces = [\n    imageList[idx - rowWidth - 1],\n    imageList[idx - rowWidth],\n    imageList[idx - rowWidth + 1],\n    imageList[idx - 1],\n    imageList[idx - 2],\n  ];\n\n  // Assuming 5 hues (the minimum allowed), making sure that all 5 previous spaces\n  // aren't the same as the current one is impossible and results in an unending loop\n  const hueList = touchingSpaces.slice(0, -1); // slicing in place can break things if not done carefully.\n  const touchingSpacesHue = hueList.map(val => val % hueWidth);\n\n  // Set default random values\n  let randImgNum = 1;\n  let randImageHue = randImgNum % hueWidth;\n  let sameAsLastRow = true;\n  let sameAsLastRowHue = true;\n\n  do {\n    // Get random values\n    randImgNum = getRandomInt(1, fabricCount + 1);\n    randImageHue = randImgNum % hueWidth;\n\n    // set params for easier \"while\" use\n    sameAsLastRow = touchingSpaces.indexOf(randImgNum) > -1;\n    sameAsLastRowHue = touchingSpacesHue.indexOf(randImageHue) > -1;\n\n    console.log(notImage, randImgNum);\n  } while (notImage.indexOf(randImgNum) > -1 || sameAsLastRow || sameAsLastRowHue);\n  return randImgNum;\n};\n\n/**\n * Generates all the images for the quilt at once based on either localStorage, or pulling random images from generateRandomImage()\n *\n * @param {int} hueWidth\n * @param {int} quiltSectionWidth\n * @param {int} quiltSectionHeight\n * @param {array} notColors\n *\n * @returns {array}\n */\nconst generateAllImages = ({ fabric, quiltSectionWidth, quiltSectionHeight }) => {\n  const imageList = getImageList();\n  const newImageList = [];\n\n  [...Array(quiltSectionWidth * quiltSectionHeight).keys()].forEach(idx => {\n    const data = { idx, rowWidth: quiltSectionWidth, fabric };\n    const image = imageList[idx] || generateRandomImage(data);\n    newImageList.push(image);\n    setImageList(newImageList);\n  });\n\n  return newImageList;\n};\n\n/**\n * Empties localStorage, and runs generateAllImages()\n *\n * @param {int} hueWidth\n * @param {int} quiltSectionWidth\n * @param {int} quiltSectionHeight\n * @param {array} notColors\n *\n * @returns {array}\n */\nconst regenerateAllImages = data => {\n  removeImageList();\n  return generateAllImages(data);\n};\n\n/**\n * Returns the imageList from either localStorage, or an empty array\n *\n * @returns {array}\n */\nconst getImageList = () => {\n  const images = JSON.parse(window.localStorage.getItem(\"imageList\"));\n  return images || [];\n};\n\n/**\n * Sets an array of images to localStorage\n *\n * @param {array} images\n */\nconst setImageList = images => {\n  window.localStorage.setItem(\"imageList\", JSON.stringify(images || []));\n};\n\n/**\n * Removes imageList from localStorage\n *\n * @param {array} images\n */\nconst removeImageList = () => {\n  window.localStorage.removeItem(\"imageList\");\n};\n\n/**\n * @returns {object} object of counts for key\n */\nconst getImageCounts = () => {\n  const imageList = getImageList();\n  let counts = {};\n\n  imageList.forEach(val => {\n    counts[val] = counts[val] + 1 || 1;\n  });\n\n  return counts;\n};\n\nexport { generateRandomImage, generateAllImages, getImageList, setImageList, regenerateAllImages, getImageCounts };\n","export default function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./homepage.css\";\n\nimport QuiltSection from \"../components/QuiltSection\";\nimport FabricKey from \"../components/FabricKey\";\nimport FormField from \"../components/FormField\";\nimport { regenerateAllImages, generateAllImages, getImageCounts, setImageList } from \"../utils/generateImages\";\nimport specs from \"../utils/specs\";\n\nconst Subtitle = ({ title, description }) => (\n  <p\n    css={{\n      margin: 10,\n      padding: 0,\n      fontSize: \"1.2rem\",\n    }}\n  >\n    <span css={{ fontWeight: \"bold\" }}>{title}</span> {description}\n  </p>\n);\n\nfunction Homepage() {\n  const lStorage = { ...localStorage };\n  const initialValues = {\n    width: lStorage.quiltSectionWidth ? lStorage.quiltSectionWidth : 17,\n    height: lStorage.quiltSectionHeight ? lStorage.quiltSectionHeight : 7,\n    fabric: lStorage.fabric ? lStorage.fabric : \"beeCreative\",\n    shape: lStorage.shape ? lStorage.shape : \"Hexagon\",\n  };\n\n  // Find out number of instancesl\n  const [counts, setImageCounts] = useState(getImageCounts());\n  const [quiltSectionWidth, setQuiltSectionWidth] = useState(initialValues.width);\n  const [quiltSectionHeight, setQuiltSectionHeight] = useState(initialValues.height);\n  const [fabric, setFabric] = useState(initialValues.fabric);\n  const [shape, setShape] = useState(initialValues.shape);\n  const [fabricSelected, selectFabric] = useState();\n  const [imageList, updateImageList] = useState([]);\n\n  const changeOneFabric = imageIndex => {\n    let newImageList = Object.assign(imageList);\n    newImageList[imageIndex] = fabricSelected;\n\n    setImageList(newImageList);\n    setImageCounts(getImageCounts());\n\n    updateImageList(generateAllImages({ quiltSectionWidth, quiltSectionHeight, fabric }));\n  };\n\n  useEffect(() => {\n    updateImageList(generateAllImages({ quiltSectionWidth, quiltSectionHeight, fabric }));\n  }, [quiltSectionWidth, quiltSectionHeight, fabric]);\n\n  return (\n    <main className=\"Homepage\">\n      <header>\n        <h1 css={{ margin: 0, paddingTop: 20 }}>Quilt Fabric Randomizer</h1>\n        <Subtitle description=\"by Jen Luker\" />\n      </header>\n\n      <div\n        css={{\n          boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\n          borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\n          borderBottom: \"1px solid rgba(0, 0, 0, 0.3)\",\n          width: \"100%\",\n          marginTop: 20,\n          padding: \"20px auto 10px auto\",\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          alignItems: \"flex-end\",\n          flexWrap: \"wrap\",\n          backgroundColor: \"#fff\",\n        }}\n      >\n        <div css={{ minWidth: 360 }}>\n          <div\n            css={{\n              width: \"100%\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              flexWrap: \"wrap\",\n              margin: `0 auto`,\n            }}\n          >\n            <Subtitle description={<a href=\"https://knitcodemonkey.github.io/hexagon-quilt-map/\">Go to Website</a>} />\n            <Subtitle description={<a href=\"https://github.com/knitcodemonkey/hexagon-quilt-map\">See on Github</a>} />\n          </div>\n          <button\n            css={{ margin: `10px auto` }}\n            type=\"button\"\n            onClick={() => {\n              const newImageList = regenerateAllImages({\n                quiltSectionWidth,\n                quiltSectionHeight,\n                fabric,\n              });\n              updateImageList(newImageList);\n\n              setImageCounts(getImageCounts());\n            }}\n          >\n            Randomize Fabric Placement\n          </button>\n        </div>\n\n        <form css={{ display: \"flex\", justifyContent: \"space-around\", flexWrap: \"wrap\" }}>\n          <div>\n            <FormField label=\"Shape:\">\n              <select\n                value={shape}\n                onChange={event => {\n                  setShape(event.target.value);\n                  localStorage.setItem(\"shape\", event.target.value);\n                }}\n              >\n                <option value={\"Hexagon\"}>Hexagon</option>\n                <option value={\"Square\"}>Square</option>\n                <option value={\"IsoscelesTriangle\"}>Isosceles Triangle</option>\n                <option value={\"RightTriangle\"}>Right Triangle</option>\n              </select>\n            </FormField>\n\n            <FormField label=\"Fabric:\">\n              <select\n                value={fabric}\n                onChange={event => {\n                  setFabric(event.target.value);\n                  localStorage.setItem(\"fabric\", event.target.value);\n                }}\n              >\n                {Object.keys(specs).map(key => {\n                  return (\n                    <option key={key} value={key}>\n                      {specs[key].name}\n                    </option>\n                  );\n                })}\n              </select>\n            </FormField>\n          </div>\n          <div>\n            <FormField label=\"Generated Width:\">\n              <select\n                value={quiltSectionWidth}\n                onChange={event => {\n                  setQuiltSectionWidth(parseInt(event.target.value));\n                  localStorage.setItem(\"quiltSectionWidth\", parseInt(event.target.value));\n                }}\n              >\n                {[...Array(30).keys()].map(num => {\n                  return (\n                    <option key={`wide-${num + 1}`} value={num + 1}>\n                      {num}\n                    </option>\n                  );\n                })}\n              </select>\n            </FormField>\n\n            <FormField label=\"Generated Height:\">\n              <select\n                value={quiltSectionHeight}\n                onChange={event => {\n                  setQuiltSectionHeight(parseInt(event.target.value));\n                  localStorage.setItem(\"quiltSectionHeight\", parseInt(event.target.value));\n                }}\n              >\n                {[...Array(100).keys()].map(num => {\n                  return (\n                    <option key={`tall-${num + 1}`} value={num + 1}>\n                      {num}\n                    </option>\n                  );\n                })}\n              </select>\n            </FormField>\n          </div>\n        </form>\n      </div>\n\n      <article\n        css={{\n          paddingBottom: \"56px\",\n          margin: \"0 auto\",\n        }}\n      >\n        <QuiltSection\n          key={`QuiltSection-${imageList.length}-${fabricSelected}`}\n          quiltSectionWidth={quiltSectionWidth}\n          quiltSectionHeight={quiltSectionHeight}\n          fabric={fabric}\n          shape={shape}\n          imageList={imageList}\n          changeOneFabric={changeOneFabric}\n          fabricSelected={fabricSelected}\n        />\n      </article>\n\n      <footer\n        css={{\n          borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\n          boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\n        }}\n      >\n        <FabricKey counts={counts} fabric={fabric} selectFabric={selectFabric} fabricSelected={fabricSelected} />\n      </footer>\n    </main>\n  );\n}\n\nexport default Homepage;\n","import React from \"react\";\nimport \"./App.css\";\nimport Homepage from \"./containers/Homepage\";\n\nfunction App() {\n  return <Homepage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}