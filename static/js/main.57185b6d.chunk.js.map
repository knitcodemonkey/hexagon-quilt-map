{"version":3,"sources":["theme.js","components/shapes/Hexagon.js","components/shapes/Square.js","components/shapes/IsoscelesTriangle.js","components/shapes/RightTriangle.js","components/QuiltSection.js","utils/specs.js","utils/is-empty.js","utils/generateImages.js","utils/getRandomInt.js","components/FabricKey.js","components/FormField.js","containers/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["theme","breakpoints","Hexagon","props","image","idx","fabric","quiltSectionWidth","changeOneFabric","fabricSelected","isEven","Math","floor","css","overflow","position","clipPath","width","height","backgroundRepeat","backgroundImage","backgroundPosition","backgroundSize","marginTop","onClick","Hexagons","quiltSectionHeight","imageList","heightMeasurement","className","display","gridTemplateColumns","gridTemplateRows","margin","paddingRight","maxHeight","boxShadow","map","key","Square","Squares","IsoscelesTriangle","marginLeft","marginRight","transform","IsoscelesTriangles","widthMeasurement","parseInt","RightTriangle","isFirst","isThird","isOddSecond","isOddFourth","isEvenSecond","isEvenFourth","RightTriangles","rows","QuiltSection","shape","specs","beeCreative","name","notImage","availableCounts","fabricCount","hueWidth","returnToWintersLane","obj","Object","Array","includes","constructor","entries","length","generateRandomImage","min","max","rowWidth","getImageList","availableFabricCounts","getFabricCounts","touchingSpaces","touchingSpacesHue","indexOf","slice","val","randImgNum","randImageHue","noFabricAvailable","missingImage","keepRerolling","sorryGottaTouch","ceil","random","sameAsLastRow","sameAsLastRowHue","isEmpty","console","log","generateAllImages","newAvailableFabricCounts","newImageList","keys","forEach","data","push","setFabricCounts","setImageList","JSON","parse","window","localStorage","getItem","getFabric","localStorageFabricCounts","images","setItem","stringify","removeImageList","removeItem","removeFabricCounts","getImageCounts","counts","generateFabricCounts","fabricCounts","imageCounts","FabricKey","selectFabric","imageNumber","missingImg","color","id","justifyContent","alignItems","border","padding","fontSize","FormField","label","children","Subtitle","title","description","Homepage","lStorage","initialValues","useEffect","setFabricLS","useState","setImageCounts","setQuiltSectionWidth","setQuiltSectionHeight","setFabric","setShape","updateImageList","changedFabrics","updateChangedFabrics","setAvailableFabricCounts","randomizeAllNew","randomizeExceptSelected","makingImageList","assign","generateWithoutChanged","flexWrap","href","type","value","onChange","event","target","num","paddingTop","paddingBottom","backgroundOpacity","imageIndex","generatedImageList","concat","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57185b6d.chunk.js","sourcesContent":["const theme = {\n  breakpoints: [\"94vw\"],\n};\n\nexport default theme;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport theme from \"../../theme\";\n\nconst Hexagon = props => {\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\n\n  // if even number wide, true.\n  // if not even number wide, make even every other row.\n  const isEven = quiltSectionWidth % 2 === 0 || Math.floor(idx / quiltSectionWidth) % 2 === 0;\n\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          position: \"relative\",\n          clipPath: \"polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)\",\n          width: `calc(125vw / ${quiltSectionWidth} - 1px)`,\n          height: `calc(8 / 9 * (125vw / ${quiltSectionWidth}) - 1px)`,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          marginTop: `calc((-8 / 9 * 125vw / ${quiltSectionWidth}) / 2)`,\n        },\n        isEven\n          ? {\n              \"&:nth-of-type(odd)\": {\n                marginTop: 0,\n              },\n            }\n          : {\n              \"&:nth-of-type(even)\": {\n                marginTop: 0,\n              },\n            },\n      ]}\n    >\n      {fabricSelected && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nHexagon.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nconst Hexagons = props => {\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\n  let heightMeasurement = `8 / 9 * (125vw / ${quiltSectionWidth})`;\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        overflow: \"hidden\",\n        width: theme.breakpoints[0],\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth} ))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight - 1}, calc(${heightMeasurement}))`,\n        margin: \"40px auto -16px auto\",\n        paddingRight: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} / 3)`,\n        maxHeight: `calc(${heightMeasurement} * ${quiltSectionHeight - 1})`,\n        boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\n      }}\n    >\n      {imageList.map((image, idx) => {\n        return <Hexagon key={`hexi-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\n      })}\n    </div>\n  );\n};\n\nHexagons.propTypes = {\n  imageList: PropTypes.array,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  fabric: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default Hexagons;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport theme from \"../../theme\";\n\nconst Square = props => {\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\n  return (\n    <div\n      css={{\n        clipPath: \"polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)\",\n        width: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} - 1px)`,\n        height: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} - 1px)`,\n        backgroundRepeat: \"repeat\",\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\",\n        backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n      }}\n    >\n      {fabricSelected && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nSquare.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nconst Squares = props => {\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        overflow: \"hidden\",\n        width: theme.breakpoints[0],\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight - 1}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\n        margin: \"40px auto -15px auto\",\n        maxHeight: `calc(${theme.breakpoints[0]} / ${quiltSectionWidth} * ${quiltSectionHeight - 1})`,\n        boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\n      }}\n    >\n      {imageList.map((image, idx) => {\n        return <Square key={`square-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\n      })}\n    </div>\n  );\n};\n\nSquares.propTypes = {\n  imageList: PropTypes.array,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  fabric: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default Squares;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport theme from \"../../theme\";\n\nconst IsoscelesTriangle = props => {\n  const { image, idx, fabric, quiltSectionWidth, changeOneFabric, fabricSelected } = props;\n\n  // if even number wide, true.\n  // if not even number wide, make even every other row.\n  const isEven = quiltSectionWidth % 2 === 1 || Math.floor(idx / quiltSectionWidth) % 2 === 0;\n\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          position: \"relative\",\n          clipPath: \"polygon(0% 0%, 100% 0%, 50% 100% )\",\n          width: `calc(${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px)`,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          marginLeft: `calc((-${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px) / 2)`,\n          marginRight: `calc((-${theme.breakpoints[0]} * 2 / ${quiltSectionWidth} - 1px) / 2)`,\n          transform: \"rotate(0deg)\",\n        },\n        isEven\n          ? {\n              \"&:nth-of-type(even)\": {\n                transform: \"rotate(180deg)\",\n              },\n            }\n          : {\n              \"&:nth-of-type(odd)\": {\n                transform: \"rotate(180deg)\",\n              },\n            },\n      ]}\n    >\n      {fabricSelected && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nIsoscelesTriangle.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nconst IsoscelesTriangles = props => {\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\n  let heightMeasurement = `${theme.breakpoints[0]} * 2 / ${quiltSectionWidth}`;\n  const widthMeasurement = `(188vw / ${quiltSectionWidth} - 1px) / 2`;\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        overflow: \"hidden\",\n        width: `calc(${theme.breakpoints[0]} - ${widthMeasurement})`,\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${parseInt(quiltSectionWidth)}, calc( ${\n          theme.breakpoints[0]\n        } / ${quiltSectionWidth}))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight}, calc(${heightMeasurement}))`,\n        margin: `40px auto -16px auto`,\n        maxHeight: `calc(${heightMeasurement} - 1})`,\n        boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\",\n      }}\n    >\n      {imageList.map((image, idx) => {\n        return <IsoscelesTriangle key={`hexi-key-${image}-${idx}`} idx={idx} image={image} {...props} />;\n      })}\n    </div>\n  );\n};\n\nIsoscelesTriangles.propTypes = {\n  imageList: PropTypes.array,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  fabric: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default IsoscelesTriangles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport theme from \"../../theme\";\n\nconst RightTriangle = props => {\n  const {\n    image,\n    idx,\n    fabric,\n    quiltSectionWidth,\n    changeOneFabric,\n    fabricSelected\n  } = props;\n\n  // if even number wide, true.\n  // if not even number wide, make even every other row.\n  const isFirst = Math.floor(idx / quiltSectionWidth) % 4 === 0;\n  const isThird = Math.floor(idx / quiltSectionWidth) % 4 === 2;\n\n  const isOddSecond =\n    Math.floor(idx / quiltSectionWidth) % 4 === 1 &&\n    (quiltSectionWidth - 1) % 2 === 1;\n  const isOddFourth =\n    Math.floor(idx / quiltSectionWidth) % 4 === 3 &&\n    (quiltSectionWidth - 1) % 2 === 1;\n  const isEvenSecond =\n    Math.floor(idx / quiltSectionWidth) % 4 === 1 &&\n    (quiltSectionWidth - 1) % 2 === 0;\n  const isEvenFourth =\n    Math.floor(idx / quiltSectionWidth) % 4 === 3 &&\n    (quiltSectionWidth - 1) % 2 === 0;\n\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          clipPath: \"polygon(0% 0%, 100% 0%, 0% 100% )\",\n          width: `calc(94vw / ${quiltSectionWidth} - 1px)`,\n          height: `calc((94vw / ${quiltSectionWidth}))`,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\"\n        },\n        isFirst && {\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(0deg)\"\n          },\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(90deg)\"\n          }\n        },\n\n        isThird && {\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(180deg)\"\n          },\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(270deg)\"\n          }\n        },\n\n        isOddSecond && {\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(180deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\n          },\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(270deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\n          }\n        },\n        isOddFourth && {\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(0deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\n          },\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(90deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\n          }\n        },\n\n        isEvenSecond && {\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(180deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\n          },\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(270deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\n          }\n        },\n        isEvenFourth && {\n          \"&:nth-of-type(odd)\": {\n            transform: \"rotate(0deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\n          },\n          \"&:nth-of-type(even)\": {\n            transform: \"rotate(90deg)\",\n            marginTop: `calc(-94vw / ${quiltSectionWidth})`\n          }\n        }\n      ]}\n    >\n      {fabricSelected && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          <button onClick={() => changeOneFabric(idx)}>{image}</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nRightTriangle.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number\n};\n\nconst RightTriangles = props => {\n  const { quiltSectionHeight, quiltSectionWidth, imageList } = props;\n  const heightMeasurement = `(94vw / ${quiltSectionWidth})`;\n  const rows = quiltSectionHeight * 2;\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        overflow: \"hidden\",\n        width: theme.breakpoints[0],\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(${theme.breakpoints[0]} / ${quiltSectionWidth}))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight + 1}, 0fr)`,\n        margin: \"40px auto -16px auto\",\n        maxHeight: `calc(${rows} * ${heightMeasurement} / 2)`,\n        boxShadow: \"0 0 4px rgba(0, 0, 0, 0.3)\"\n      }}\n    >\n      {imageList.map((image, idx) => {\n        return (\n          <RightTriangle\n            key={`hexi-key-${image}-${idx}`}\n            idx={idx}\n            image={image}\n            {...props}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nRightTriangles.propTypes = {\n  imageList: PropTypes.array,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  fabric: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number\n};\n\nexport default RightTriangles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Hexagons from \"./shapes/Hexagon\";\nimport Squares from \"./shapes/Square\";\nimport IsoscelesTriangles from \"./shapes/IsoscelesTriangle\";\nimport RightTriangles from \"./shapes/RightTriangle\";\n\nconst QuiltSection = props => {\n  const { shape } = props;\n\n  switch (shape) {\n    case \"Square\":\n      return <Squares {...props} />;\n    case \"IsoscelesTriangle\":\n      return <IsoscelesTriangles {...props} />;\n    case \"RightTriangle\":\n      return <RightTriangles {...props} />;\n    default:\n      return <Hexagons {...props} />;\n  }\n};\n\nQuiltSection.propTypes = {\n  setCounts: PropTypes.func,\n  quiltSectionWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  quiltSectionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  fabric: PropTypes.string,\n  shape: PropTypes.string,\n  changeOneFabric: PropTypes.func,\n  fabricSelected: PropTypes.number,\n};\n\nexport default QuiltSection;\n","const specs = {\n  beeCreative: {\n    name: `\"Bee Creative\" by Deb Strain`,\n    notImage: [ 25, 27, 28, 30, 31, 32, 33],\n    availableCounts: {\n      1: 2, 2: 2, 3: 7.5, 4: 3, 5:2, \n      6: 11.5, 7: 6.5, 8: 14.5, 9: 14.5, 10: 2.5,\n      11: 1.5, 12: 8.5, 13: 2.5, 14: 5, 15: 10,\n      16: 11, 17: 9, 18: 6.5, 19: 14.5, 20: 10,\n      21: 1, 22: 1, 23: 8, 24: 13.5, \n      26: 4, 29: 4, 34: 5 \n    },\n    fabricCount: 34,\n    hueWidth: 5,\n  },\n  returnToWintersLane: {\n    name: `\"Return to Winter's Lane\" by Kate & Birdie`,\n    notImage: [19, 21],\n    fabricCount: 24,\n    hueWidth: 5,\n  },\n};\n\nexport default specs;\n","/**\n * A lightweight clone of the Lodash function.\n */\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default (obj) => [Object, Array].includes((obj || {}).constructor) && !Object.entries(obj || {}).length\n","import getRandomInt from './getRandomInt'\nimport specs from './specs'\nimport isEmpty from './is-empty'\n\n/**\n * Generates a single random image for generateAllImages()\n *\n * @param {int} idx\n * @param {int} rowWidth\n * @param {int} hueWidth\n * @param {array} notColors\n *\n * @returns {int}\n */\nconst generateRandomImage = ({ idx, rowWidth, fabric, shape }) => {\n\tconst { hueWidth, notImage, fabricCount } = specs[fabric]\n\n\tlet imageList = getImageList()\n\tlet availableFabricCounts = getFabricCounts()\n\n\t// get 3 hexis touching top of current hexi\n\tlet touchingSpaces = [imageList[idx - 1], imageList[idx - 2]]\n\n\tif (shape && shape.indexOf('Triangle') > -1) {\n\t\ttouchingSpaces = [\n\t\t\t...touchingSpaces,\n\t\t\timageList[idx - rowWidth * 2 - 1],\n\t\t\timageList[idx - rowWidth * 2],\n\t\t\timageList[idx - rowWidth * 2 + 1],\n\t\t]\n\t} else {\n\t\ttouchingSpaces = [\n\t\t\t...touchingSpaces,\n\t\t\timageList[idx - rowWidth - 1],\n\t\t\timageList[idx - rowWidth],\n\t\t\timageList[idx - rowWidth + 1],\n\t\t]\n\t}\n\n\t// Assuming 5 hues (the minimum allowed), making sure that all 5 previous spaces\n\t// aren't the same as the current one is impossible and results in an unending loop\n\tconst hueList = touchingSpaces.slice(0, -1) // slicing in place can break things if not done carefully.\n\tconst touchingSpacesHue = hueList.map((val) => val % hueWidth)\n\n\t// Set default random values\n\tlet randImgNum = 1\n\tlet randImageHue = randImgNum % hueWidth\n\tlet noFabricAvailable = true\n\tlet missingImage = false\n\tlet keepRerolling = false\n\n\tlet sorryGottaTouch = 0\n\n\tdo {\n\t\t// Get random values\n\t\trandImgNum = getRandomInt(1, fabricCount + 1)\n\t\trandImageHue = randImgNum % hueWidth\n\n\t\t// set params for easier \"while\" use\n\t\tconst sameAsLastRow = touchingSpaces.indexOf(randImgNum) > -1\n\t\tconst sameAsLastRowHue = touchingSpacesHue.indexOf(randImageHue) > -1\n\n\t\t// Make sure that availableFabricCounts isn't empty for this random number\n\t\tif (isEmpty(availableFabricCounts?.[randImgNum])) {\n\t\t\tavailableFabricCounts[randImgNum] = isEmpty(specs[fabric]?.availableCounts?.[randImgNum])\n\t\t\t\t? 100\n\t\t\t\t: specs[fabric].availableCounts[randImgNum]\n\t\t}\n\n\t\tnoFabricAvailable = isEmpty(availableFabricCounts?.[randImgNum])\n\t\t\t? false\n\t\t\t: availableFabricCounts?.[randImgNum] - 1 <= 0\n\t\tmissingImage = notImage.indexOf(randImgNum) > -1\n\n\t\tconst reroll = missingImage || sameAsLastRow || sameAsLastRowHue || noFabricAvailable\n\t\tconst tooManyRerolls = sorryGottaTouch > 10 && !noFabricAvailable && !missingImage\n\t\tkeepRerolling = reroll && !tooManyRerolls\n\n\t\tif (keepRerolling) {\n\t\t\tsorryGottaTouch++\n\t\t} else {\n\t\t\tsorryGottaTouch = 0\n\t\t}\n\n\t\tconsole.log({ keepRerolling, sorryGottaTouch })\n\t} while (keepRerolling)\n\n\treturn randImgNum\n}\n\n/**\n * Generates all the images for the quilt at once based on either localStorage, or pulling random images from generateRandomImage()\n *\n * @param {int} hueWidth\n * @param {int} quiltSectionWidth\n * @param {int} quiltSectionHeight\n * @param {array} notColors\n *\n * @returns {array}\n */\nconst generateAllImages = ({ fabric, quiltSectionWidth, quiltSectionHeight, shape }) => {\n\tconst newAvailableFabricCounts = getFabricCounts()\n\tconst imageList = getImageList()\n\tconst newImageList = []\n\tconst height = shape === 'RightTriangle' ? (quiltSectionHeight - 1) * 2 : quiltSectionHeight\n\n\t;[...Array(quiltSectionWidth * height).keys()].forEach((idx) => {\n\t\tconst data = { idx, rowWidth: quiltSectionWidth, fabric }\n\t\tconst image = imageList[idx] || generateRandomImage(data)\n\t\tnewImageList.push(image)\n\t\tnewAvailableFabricCounts[image] = newAvailableFabricCounts?.[image] - 1\n\t\tsetFabricCounts(newAvailableFabricCounts)\n\t\tsetImageList(newImageList)\n\t})\n\tconsole.log({ newImageList, newAvailableFabricCounts })\n\treturn { newImageList, newAvailableFabricCounts }\n}\n\n/**\n * Generates all the images for the quilt pulling random images from generateRandomImage().\n * Then changes items of the generated quit array which indexes are inside of the changedFabrics arrat back to the previous version.\n *\n * @param {object} fabric\n * @param {int} quiltSectionWidth\n * @param {int} quiltSectionHeight\n * @param {array} changedFabrics\n *\n * @returns {array}\n */\nconst generateWithoutChanged = ({ fabric, quiltSectionWidth, quiltSectionHeight, changedFabrics }) => {\n\tconst imageList = getImageList()\n\tconst newImageList = []\n\tconst newAvailableFabricCounts = getFabricCounts()\n\n\t;[...Array(quiltSectionWidth * quiltSectionHeight).keys()].forEach((idx) => {\n\t\tconst data = { idx, rowWidth: quiltSectionWidth, fabric }\n\t\tconst image = generateRandomImage(data)\n\t\tnewImageList.push(image)\n\t\tnewAvailableFabricCounts[image] = newAvailableFabricCounts[image] - 1\n\t\tsetImageList(newImageList)\n\t\tsetFabricCounts(newAvailableFabricCounts)\n\t})\n\n\tchangedFabrics.forEach((idx) => {\n\t\tnewImageList[idx] = imageList[idx]\n\t})\n\n\treturn { newImageList, newAvailableFabricCounts }\n}\n\n/**\n * Empties localStorage, and runs generateAllImages()\n *\n * @param {int} hueWidth\n * @param {int} quiltSectionWidth\n * @param {int} quiltSectionHeight\n * @param {array} notColors\n *\n * @returns {array}\n */\nconst regenerateAllImages = (data) => {\n\tremoveImageList()\n\tremoveFabricCounts()\n\treturn generateAllImages(data)\n}\n\n/**\n * Returns the imageList from either localStorage, or an empty array\n *\n * @returns {array}\n */\nconst getImageList = () => {\n\tconst images = JSON.parse(window.localStorage.getItem('imageList'))\n\treturn images || []\n}\n\n/**\n * Sets an array of fabric counts used\n *\n * @param {array} images\n */\nconst getFabricCounts = () => {\n\tconst availableFabricCounts = specs[getFabric()]?.availableCounts ?? []\n\n\tconst newAvailableFabricCounts = { ...availableFabricCounts }\n\tconst localStorageFabricCounts = JSON.parse(window.localStorage.getItem('availableFabricCounts')) ?? []\n\n\tObject.entries(localStorageFabricCounts).forEach(([key, val]) => (newAvailableFabricCounts[key] = val))\n\treturn newAvailableFabricCounts\n}\n\n/**\n * Sets an array of images to localStorage\n * @param {array} images\n */\nconst setImageList = (images) => {\n\twindow.localStorage.setItem('imageList', JSON.stringify(images || []))\n}\n\n/**\n * Sets an array of fabric counts used\n *\n * @param {array} images\n */\nconst setFabricCounts = (availableFabricCounts) => {\n\twindow.localStorage.setItem('availableFabricCounts', JSON.stringify(availableFabricCounts))\n}\n\nexport const setFabricLS = (fabric) => {\n\twindow.localStorage.setItem('fabric', fabric)\n}\n\n/**\n * Removes imageList from localStorage\n *\n * @param {array} images\n */\nconst removeImageList = () => {\n\twindow.localStorage.removeItem('imageList')\n}\n\n/**\n * Removes an array of fabric counts used\n *\n * @param {array} images\n */\nconst removeFabricCounts = () => {\n\twindow.localStorage.removeItem('availableFabricCounts')\n}\n\n/**\n * @returns {object} object of counts for key\n */\n\nconst getImageCounts = () => {\n\tconst imageList = getImageList()\n\tlet counts = {}\n\n\timageList.forEach((val) => {\n\t\tcounts[val] = isEmpty(counts?.[val]) ? 1 : counts[val] + 1\n\t})\n\n\treturn counts\n}\n\nexport const generateFabricCounts = () => {\n\tconst imageList = getImageList()\n\tconst fabric = getFabric() ?? 'beeCreative'\n\tconst fabricCounts = specs[fabric].availableCounts ?? []\n\n\timageList.forEach((val) => {\n\t\tfabricCounts[val]--\n\t})\n\n\treturn { fabricCounts, imageCounts: getImageCounts() }\n}\n\nexport const getFabric = () => window.localStorage.getItem('fabric')\n\nexport {\n\tgenerateRandomImage,\n\tgenerateAllImages,\n\tgenerateWithoutChanged,\n\tgetImageList,\n\tsetImageList,\n\tgetFabricCounts,\n\tsetFabricCounts,\n\tregenerateAllImages,\n\tgetImageCounts,\n}\n","export default function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport specs from '../utils/specs'\nimport { getFabricCounts, getImageCounts } from '../utils/generateImages'\n\nconst FabricKey = ({ counts, fabric, selectFabric, fabricSelected }) => {\n\tconst { fabricCount, notImage, hueWidth } = specs[fabric]\n\tconst gridTemplateColumns = `calc(94vw / ${hueWidth} - 10px)`\n\n\tconst fabricCounts = getFabricCounts()\n\n\treturn (\n\t\t<aside\n\t\t\tcss={{\n\t\t\t\tmargin: 0,\n\t\t\t\tpadding: 20,\n\t\t\t\twidth: 'calc(100% - 40px)',\n\t\t\t\tbackgroundColor: '#fff',\n\t\t\t}}\n\t\t>\n\t\t\t<h2 css={{ margin: 0, marginBottom: 20, padding: 0 }}>Color Key</h2>\n\n\t\t\t{/** Hue Headers */}\n\t\t\t<div\n\t\t\t\tcss={{\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tjustifyContent: 'space-around',\n\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\tfontSize: 24,\n\t\t\t\t\tmargin: 0,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{[...Array(hueWidth).keys()].map((idx) => {\n\t\t\t\t\tconst imageNumber = idx + 1\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={`Hue-Header-${imageNumber % hueWidth}`}\n\t\t\t\t\t\t\tcss={{ borderBottom: '1px solid grey', marginBottom: 10, paddingBottom: 10, width: '100%' }}\n\t\t\t\t\t\t>{`Hue: ${imageNumber % hueWidth || hueWidth}`}</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\n\t\t\t{/** Images */}\n\t\t\t<div css={{ display: 'flex', justifyContent: 'space-between', flexWrap: 'wrap' }}>\n\t\t\t\t{[...Array(Math.ceil(fabricCount / hueWidth) * hueWidth).keys()].map((idx) => {\n\t\t\t\t\tconst imageNumber = idx + 1\n\t\t\t\t\tconst missingImg = notImage.indexOf(imageNumber) !== -1 || imageNumber > fabricCount\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div css={{ marginBottom: 10 }} key={`Image-${imageNumber}`}>\n\t\t\t\t\t\t\t{!missingImg && (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tcss={{\n\t\t\t\t\t\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\t\t\t\t\t\tfontSize: 16,\n\t\t\t\t\t\t\t\t\t\ttextShadow: '0px 0px 2px white',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span>{`#${imageNumber}: `}</span>\n\t\t\t\t\t\t\t\t\t<span css={{ color: (counts[imageNumber] < 4 || counts[imageNumber] > 6) && 'red' }}>{`${\n\t\t\t\t\t\t\t\t\t\tcounts[imageNumber] || 0\n\t\t\t\t\t\t\t\t\t} uses`}</span>\n\t\t\t\t\t\t\t\t\t{' - '}\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tcss={{ color: fabricCounts[imageNumber] < 1 && 'red' }}\n\t\t\t\t\t\t\t\t\t>{`${fabricCounts?.[imageNumber]} left`}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={`orig-image-order-${imageNumber}`}\n\t\t\t\t\t\t\t\tid={`orig-image-order-${imageNumber}`}\n\t\t\t\t\t\t\t\tcss={{\n\t\t\t\t\t\t\t\t\twidth: gridTemplateColumns,\n\t\t\t\t\t\t\t\t\theight: 100,\n\t\t\t\t\t\t\t\t\tbackgroundRepeat: 'repeat',\n\t\t\t\t\t\t\t\t\tbackgroundImage: `url(./images/${fabric}/${fabric}${imageNumber}.jpg)`,\n\t\t\t\t\t\t\t\t\tbackgroundPosition: 'center',\n\t\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\t\t\talignItems: 'flex-end',\n\t\t\t\t\t\t\t\t\tborder: !missingImg && '1px solid grey',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{!missingImg && (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tcss={{ width: 'calc(100% + 2px)', margin: -1, padding: 5, fontSize: '0.9rem' }}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tfabricSelected === imageNumber ? selectFabric('') : selectFabric(imageNumber)\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{fabricSelected === imageNumber ? 'No more!' : 'Choose me!'}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</aside>\n\t)\n}\n\nFabricKey.propTypes = {\n\tcounts: PropTypes.object,\n\thueWidth: PropTypes.number,\n\tfabric: PropTypes.string,\n\tfabricSelected: PropTypes.number,\n\tselectFabric: PropTypes.func,\n}\n\nexport default FabricKey\n","import React from \"react\";\n\nconst FormField = ({ label, children }) => {\n  return (\n    <label\n      css={{\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        margin: 18,\n        fontSize: \"1.2rem\",\n      }}\n    >\n      <p css={{ margin: 0, padding: 0, textAlign: \"right\" }}>{label}</p>\n      {children}\n    </label>\n  );\n};\n\nexport default FormField;\n","import React, { useState, useEffect } from 'react'\nimport './homepage.css'\n\nimport QuiltSection from '../components/QuiltSection'\nimport FabricKey from '../components/FabricKey'\nimport FormField from '../components/FormField'\nimport {\n\tregenerateAllImages,\n\tgenerateAllImages,\n\tgenerateWithoutChanged,\n\tgetImageCounts,\n\tsetImageList,\n\tgetFabricCounts,\n\tsetFabricCounts,\n\tsetFabricLS,\n\tgenerateFabricCounts,\n} from '../utils/generateImages'\nimport specs from '../utils/specs'\n\nconst Subtitle = ({ title, description }) => (\n\t<p\n\t\tcss={{\n\t\t\tmargin: 10,\n\t\t\tpadding: 0,\n\t\t\tfontSize: '1.2rem',\n\t\t}}\n\t>\n\t\t<span css={{ fontWeight: 'bold' }}>{title}</span> {description}\n\t</p>\n)\n\nfunction Homepage() {\n\tconst lStorage = { ...localStorage }\n\n\tconst initialValues = {\n\t\twidth: parseInt(lStorage?.quiltSectionWidth ?? 17),\n\t\theight: parseInt(lStorage?.quiltSectionHeight ?? 7),\n\t\tfabric: lStorage?.fabric ?? 'beeCreative',\n\t\tshape: lStorage?.shape ?? 'Hexagon',\n\t\tavailableCounts: specs.beeCreative?.availableCounts,\n\t}\n\n\tuseEffect(() => {\n\t\tsetFabricLS(initialValues.fabric)\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\t// Find out number of instancesl\n\tconst [counts, setImageCounts] = useState(getImageCounts())\n\tconst [quiltSectionWidth, setQuiltSectionWidth] = useState(initialValues.width)\n\tconst [quiltSectionHeight, setQuiltSectionHeight] = useState(initialValues.height)\n\tconst [fabric, setFabric] = useState(initialValues.fabric)\n\tconst [shape, setShape] = useState(initialValues.shape)\n\tconst [fabricSelected, selectFabric] = useState()\n\tconst [imageList, updateImageList] = useState([])\n\tconst [changedFabrics, updateChangedFabrics] = useState([])\n\tconst [availableFabricCounts, setAvailableFabricCounts] = useState(initialValues.availableCounts)\n\n\tconst changeOneFabric = (imageIndex) => {\n\t\tlet newImageList = Object.assign(imageList)\n\n\t\tnewImageList[imageIndex] = fabricSelected\n\t\tsetImageList(newImageList)\n\t\tsetImageCounts(getImageCounts())\n\n\t\tconst { newImageList: generatedImageList, newAvailableFabricCounts } = generateAllImages({\n\t\t\tquiltSectionWidth,\n\t\t\tquiltSectionHeight,\n\t\t\tfabric,\n\t\t\tshape,\n\t\t})\n\n\t\tsetFabricCounts(newAvailableFabricCounts)\n\t\tupdateImageList(generatedImageList)\n\t\tsetAvailableFabricCounts(newAvailableFabricCounts)\n\n\t\tif (!changedFabrics.includes(imageIndex, 0)) updateChangedFabrics(changedFabrics.concat(imageIndex))\n\t}\n\n\tconst randomizeAllNew = () => {\n\t\tconst { newImageList } = regenerateAllImages({\n\t\t\tquiltSectionWidth,\n\t\t\tquiltSectionHeight,\n\t\t\tfabric,\n\t\t})\n\n\t\tupdateImageList(newImageList)\n\t\tsetAvailableFabricCounts(generateFabricCounts())\n\t\tupdateChangedFabrics([])\n\n\t\tsetImageCounts(getImageCounts())\n\t}\n\n\tconst randomizeExceptSelected = () => {\n\t\tlet makingImageList = Object.assign(imageList)\n\n\t\tsetImageList(makingImageList)\n\t\tsetImageCounts(getImageCounts())\n\t\tsetFabricCounts(getFabricCounts())\n\n\t\tconst { newImageList, newAvailableFabricCounts } = generateWithoutChanged({\n\t\t\tquiltSectionWidth,\n\t\t\tquiltSectionHeight,\n\t\t\tfabric,\n\t\t\tchangedFabrics,\n\t\t})\n\n\t\tupdateImageList(newImageList)\n\t\tsetAvailableFabricCounts(newAvailableFabricCounts)\n\t}\n\n\tuseEffect(() => {\n\t\tconst { newImageList } = generateAllImages({\n\t\t\tquiltSectionWidth,\n\t\t\tquiltSectionHeight,\n\t\t\tfabric,\n\t\t\tshape,\n\t\t})\n\n\t\tupdateImageList(newImageList)\n\t\tsetImageCounts(getImageCounts())\n\t\tsetAvailableFabricCounts(generateFabricCounts())\n\t}, [quiltSectionWidth, quiltSectionHeight, fabric, shape])\n\n\treturn (\n\t\t<main className=\"Homepage\">\n\t\t\t<header>\n\t\t\t\t<h1 css={{ margin: 0, paddingTop: 20 }}>Quilt Fabric Randomizer</h1>\n\t\t\t\t<Subtitle description=\"by Jen Luker\" />\n\t\t\t</header>\n\n\t\t\t<div\n\t\t\t\tcss={{\n\t\t\t\t\tboxShadow: '0 0 4px rgba(0, 0, 0, 0.3)',\n\t\t\t\t\tborderTop: '1px solid rgba(0, 0, 0, 0.3)',\n\t\t\t\t\tborderBottom: '1px solid rgba(0, 0, 0, 0.3)',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\tmarginTop: 20,\n\t\t\t\t\tpadding: '20px auto 10px auto',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tjustifyContent: 'space-around',\n\t\t\t\t\talignItems: 'flex-end',\n\t\t\t\t\tflexWrap: 'wrap',\n\t\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div css={{ minWidth: 360 }}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tcss={{\n\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\tjustifyContent: 'space-between',\n\t\t\t\t\t\t\tflexWrap: 'wrap',\n\t\t\t\t\t\t\tmargin: `0 auto`,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Subtitle description={<a href=\"https://knitcodemonkey.github.io/hexagon-quilt-map/\">Go to Website</a>} />\n\t\t\t\t\t\t<Subtitle description={<a href=\"https://github.com/knitcodemonkey/hexagon-quilt-map\">See on Github</a>} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tcss={{\n\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\tjustifyContent: 'space-between',\n\t\t\t\t\t\t\tflexWrap: 'wrap',\n\t\t\t\t\t\t\tmargin: `10px auto`,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<button css={{ flexWrap: 'wrap' }} type=\"button\" onClick={randomizeAllNew}>\n\t\t\t\t\t\t\tRandomize\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tcss={{ flexWrap: 'wrap' }}\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tif (changedFabrics.length > 0) randomizeExceptSelected()\n\t\t\t\t\t\t\t\telse randomizeAllNew()\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRandomize Not Changed\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<form\n\t\t\t\t\tcss={{\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tjustifyContent: 'space-around',\n\t\t\t\t\t\tflexWrap: 'wrap',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<FormField label=\"Shape:\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tvalue={shape}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tsetShape(event.target.value)\n\t\t\t\t\t\t\t\t\tlocalStorage.setItem('shape', event.target.value)\n\t\t\t\t\t\t\t\t\tupdateChangedFabrics([])\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value={'Hexagon'}>Hexagon</option>\n\t\t\t\t\t\t\t\t<option value={'Square'}>Square</option>\n\t\t\t\t\t\t\t\t<option value={'IsoscelesTriangle'}>Isosceles Triangle</option>\n\t\t\t\t\t\t\t\t<option value={'RightTriangle'}>Right Triangle</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</FormField>\n\n\t\t\t\t\t\t<FormField label=\"Fabric:\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tvalue={fabric}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tsetFabric(event.target.value)\n\t\t\t\t\t\t\t\t\tlocalStorage.setItem('fabric', event.target.value)\n\t\t\t\t\t\t\t\t\tupdateChangedFabrics([])\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{Object.keys(specs).map((key) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<option key={key} value={key}>\n\t\t\t\t\t\t\t\t\t\t\t{specs[key].name}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</FormField>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<FormField label=\"Generated Width:\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tvalue={quiltSectionWidth}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tsetQuiltSectionWidth(parseInt(event.target.value))\n\t\t\t\t\t\t\t\t\tlocalStorage.setItem('quiltSectionWidth', parseInt(event.target.value))\n\t\t\t\t\t\t\t\t\tupdateChangedFabrics([])\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{[...Array(30).keys()].map((num) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<option key={`wide-${num + 1}`} value={num + 1}>\n\t\t\t\t\t\t\t\t\t\t\t{num}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</FormField>\n\n\t\t\t\t\t\t<FormField label=\"Generated Height:\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tvalue={quiltSectionHeight}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tsetQuiltSectionHeight(parseInt(event.target.value))\n\t\t\t\t\t\t\t\t\tlocalStorage.setItem('quiltSectionHeight', parseInt(event.target.value))\n\t\t\t\t\t\t\t\t\tupdateChangedFabrics([])\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{[...Array(100).keys()].map((num) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<option key={`tall-${num + 1}`} value={num + 1}>\n\t\t\t\t\t\t\t\t\t\t\t{num}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</FormField>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\n\t\t\t<article\n\t\t\t\tcss={{\n\t\t\t\t\tpaddingTop: 1,\n\t\t\t\t\tpaddingBottom: 56,\n\t\t\t\t\tmargin: '0 auto',\n\t\t\t\t\tbackgroundImage: `url(./wood.jpg)`,\n\t\t\t\t\tbackgroundOpacity: 0.5,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<QuiltSection\n\t\t\t\t\tkey={`QuiltSection-${imageList.length}-${fabricSelected}`}\n\t\t\t\t\tquiltSectionWidth={quiltSectionWidth}\n\t\t\t\t\tquiltSectionHeight={quiltSectionHeight}\n\t\t\t\t\tfabric={fabric}\n\t\t\t\t\tshape={shape}\n\t\t\t\t\timageList={imageList}\n\t\t\t\t\tchangeOneFabric={changeOneFabric}\n\t\t\t\t\tfabricSelected={fabricSelected}\n\t\t\t\t/>\n\t\t\t</article>\n\n\t\t\t<footer\n\t\t\t\tcss={{\n\t\t\t\t\tborderTop: '1px solid rgba(0, 0, 0, 0.3)',\n\t\t\t\t\tboxShadow: '0 0 4px rgba(0, 0, 0, 0.3)',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<FabricKey\n\t\t\t\t\tcounts={counts}\n\t\t\t\t\tfabric={fabric}\n\t\t\t\t\tselectFabric={selectFabric}\n\t\t\t\t\tfabricSelected={fabricSelected}\n\t\t\t\t\tavailableFabricCounts={availableFabricCounts}\n\t\t\t\t\tkey={availableFabricCounts}\n\t\t\t\t/>\n\t\t\t</footer>\n\t\t</main>\n\t)\n}\n\nexport default Homepage\n","import React from \"react\";\nimport \"./App.css\";\nimport Homepage from \"./containers/Homepage\";\n\nfunction App() {\n  return <Homepage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}